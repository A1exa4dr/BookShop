@page "/suppliers/edit"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Поставщик</h2>
<hr />
@if (Supplier is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Supplier" OnValidSubmit="UpdateSupplier" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Supplier.SupplierId" value="@Supplier.SupplierId" />
                <div class="mb-3">
                    <label for="name" class="form-label">ФИО:</label>
                    <InputText id="name" @bind-Value="Supplier.Name" class="form-control" />
                    <ValidationMessage For="() => Supplier.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Адрес:</label>
                    <InputText id="address" @bind-Value="Supplier.Address" class="form-control" />
                    <ValidationMessage For="() => Supplier.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">Номер телефона:</label>
                    <InputText id="phonenumber" @bind-Value="Supplier.PhoneNumber" class="form-control" />
                    <ValidationMessage For="() => Supplier.PhoneNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Почта:</label>
                    <InputText id="email" @bind-Value="Supplier.Email" class="form-control" />
                    <ValidationMessage For="() => Supplier.Email" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/suppliers">Обратно к списку поставщиков</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int SupplierId { get; set; }

    [SupplyParameterFromForm]
    private Supplier? Supplier { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Supplier ??= await context.Suppliers.FirstOrDefaultAsync(m => m.SupplierId == SupplierId);

        if (Supplier is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateSupplier()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Supplier!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SupplierExists(Supplier!.SupplierId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/suppliers");
    }

    private bool SupplierExists(int supplierid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Suppliers.Any(e => e.SupplierId == supplierid);
    }
}
