@page "/orders/edit"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Редактировать</PageTitle>

<h1>Редактировать</h1>

<h2>Заказ</h2>
<hr />
@if (Order is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Order" OnValidSubmit="UpdateOrder" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Order.OrderId" value="@Order.OrderId" />
                @* <div class="mb-3">
                    <label for="userid" class="form-label">Пользователь:</label>
                    <InputText id="userid" @bind-Value="Order.UserId" class="form-control" />
                    <ValidationMessage For="() => Order.UserId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="orderdate" class="form-label">Дата заказа:</label>
                    <InputDate id="orderdate" @bind-Value="Order.OrderDate" class="form-control" />
                    <ValidationMessage For="() => Order.OrderDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="totalamount" class="form-label">Сумма заказа:</label>
                    <InputNumber id="totalamount" @bind-Value="Order.TotalAmount" class="form-control" />
                    <ValidationMessage For="() => Order.TotalAmount" class="text-danger" />
                </div> *@
                <div class="mb-3">
                    <label for="orderstatusid" class="form-label">Статус заказа:</label>
                    <select id="orderstatusid" @bind="Order.OrderStatusId" class="form-control">
                        @foreach (var orderstatus in OrderStatuses)
                        {
                            <option value="@orderstatus.OrderStatusId">@orderstatus.Status</option>
                        }
                    </select>
                    <ValidationMessage For="() => Order.OrderStatusId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button> |
                <a href="/orders" class="btn btn-secondary">Обратно к списку заказов</a>
            </EditForm>
        </div>
    </div>
}

@* <div>
    <a href="/orders">Обратно к списку заказов</a>
</div> *@

@code {
    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    [SupplyParameterFromForm]
    private Order? Order { get; set; }
    private List<OrderStatus> OrderStatuses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        OrderStatuses = await context.OrderStatuses.ToListAsync();
        Order ??= await context.Orders.FirstOrDefaultAsync(m => m.OrderId == OrderId);

        if (Order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateOrder()
    {
        using var context = DbFactory.CreateDbContext();
        // context.Attach(Order!).State = EntityState.Modified;

        // Проверяем, существует ли книга
        var orderToUpdate = await context.Orders
            .Include(b => b.OrderStatus)
            .FirstOrDefaultAsync(b => b.OrderId == Order!.OrderId);

        if (orderToUpdate == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Обновляем значения
        orderToUpdate.OrderStatusId = Order.OrderStatusId;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!OrderExists(Order!.OrderId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/orders");
    }

    private bool OrderExists(int orderid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Orders.Any(e => e.OrderId == orderid);
    }
}
