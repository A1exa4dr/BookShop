@page "/reviews/details"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Client,Admin")]

<PageTitle>Описание</PageTitle>

<h1>Описание</h1>

<div>
    <h2>Отзыв</h2>
    <hr />
    @if (review is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Пользователь</dt>
            <dd class="col-sm-10">@review.UserId</dd>
            <dt class="col-sm-2">Название книги</dt>
            <dd class="col-sm-10">@review.BookId</dd>
            <dt class="col-sm-2">Рейтинг</dt>
            <dd class="col-sm-10">@review.Rating</dd>
            <dt class="col-sm-2">Отзыв</dt>
            <dd class="col-sm-10">@review.ReviewText</dd>
            <dt class="col-sm-2">Дата отзыва</dt>
            <dd class="col-sm-10">@review.DatePosted</dd>
        </dl>
        <div>
            <a href="@($"/reviews/edit?reviewid={review.ReviewId}")">Редактировать</a> |
            <a href="@($"/reviews")">Обратно к списку отзывов</a>
        </div>
    }
</div>

@code {
    private Review? review;

    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        review = await context.Reviews.FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
