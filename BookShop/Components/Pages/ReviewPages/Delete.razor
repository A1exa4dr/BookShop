@page "/reviews/delete"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Client,Admin")]

<PageTitle>Удалить отзыв</PageTitle>

<h1>Удалить отзыв</h1>

<p>Вы точно хотите удалить этот отзыв?</p>
<div>
    <h2>Отзыв</h2>
    <hr />
    @if (review is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Пользователь</dt>
            <dd class="col-sm-10">@review.UserId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Книга</dt>
            <dd class="col-sm-10">@review.Book.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Рейтинг</dt>
            <dd class="col-sm-10">@review.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Отзыв</dt>
            <dd class="col-sm-10">@review.ReviewText</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Дата отзыва</dt>
            <dd class="col-sm-10">@review.DatePosted</dd>
        </dl>
        <EditForm method="post" Model="review" OnValidSubmit="DeleteReview" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(review is null)">Удалить</button> |
            <a href="/reviews" class="btn btn-secondary">Обратно к списку отзывов</a>
        </EditForm>
    }
</div>

@code {
    private Review? review;

    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        review = await context.Reviews.Include(od => od.Book).FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Reviews.Remove(review!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }
}
