@page "/genres/delete"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Удалить жанр</PageTitle>

<h1>Удалить жанр</h1>

<p>Вы точно хотите удалить этот жанр?</p>
<div>
    <h2>Жанр</h2>
    <hr />
    @if (genre is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Название жанра:</dt>
            <dd class="col-sm-10">@genre.Name</dd>
        </dl>
        <EditForm method="post" Model="genre" OnValidSubmit="DeleteGenre" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(genre is null)">Удалить</button> |
            <a href="/genres" class="btn btn-secondary">Обратно к списку жанров</a>
        </EditForm>
    }
</div>

@code {
    private Genre? genre;

    [SupplyParameterFromQuery]
    private int GenreId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        genre = await context.Genres.FirstOrDefaultAsync(m => m.GenreId == GenreId);

        if (genre is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGenre()
    {
        using var context = DbFactory.CreateDbContext();
        context.Genres.Remove(genre!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/genres");
    }
}
