@page "/importexcel"
@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.EntityFrameworkCore
@using BookShop.Data 
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms;
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Импорт данных из Excel</PageTitle>

<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>
@if (isLoading)
{
    <p>Загрузка...</p>
}
else
{
    <ul>
        <div>Количество импортированных авторов: @authorRefs.Count()</div>
        <div>Количество импортированных жанров: @genreRefs.Count()</div>
        <div>Количество импортированных издателей: @publisherRefs.Count()</div>
        <div>Количество импортированных поставщиков: @supplierRefs.Count()</div>
        <div>Количество импортированных книг: @bookRefs.Count()</div>
        <div>Количество импортированных полов: @genderRefs.Count()</div>
        <div>Количество импортированных пользователей: @userRefs.Count()</div>
        <div>Количество импортированных статусов заказов: @orderStatusRefs.Count()</div>
        <div>Количество импортированных заказов: @orderRefs.Count()</div>
        <div>Количество импортированных деталей заказов: @orderDetailRefs.Count()</div>
        <div>Количество импортированных отзывов: @reviewRefs.Count()</div>
        <div>Количество импортированных пожеланий: @wishlistRefs.Count()</div>
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    ApplicationDbContext context = default!;
    List<AuthorRef> authorRefs = new List<AuthorRef>();
    List<GenreRef> genreRefs = new List<GenreRef>();
    List<PublisherRef> publisherRefs = new List<PublisherRef>();
    List<SupplierRef> supplierRefs = new List<SupplierRef>();
    List<BookRef> bookRefs = new List<BookRef>();
    List<GenderRef> genderRefs = new List<GenderRef>();
    List<ApplicationUserRef> userRefs = new List<ApplicationUserRef>();
    List<OrderStatusRef> orderStatusRefs = new List<OrderStatusRef>();
    List<OrderRef> orderRefs = new List<OrderRef>();
    List<OrderDetailRef> orderDetailRefs = new List<OrderDetailRef>();
    List<ReviewRef> reviewRefs = new List<ReviewRef>();
    List<WishlistRef> wishlistRefs = new List<WishlistRef>();


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
    }

    public string ErrorMessage { get; set; } = "";
    private long maxFileSize = 1024 * 15;
    private bool isLoading;
    string? errworksheet { get; set; }
    int? errindexrow { get; set; }
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        var browserFile = e.File;
        if (browserFile != null)
        {
            try
            {
                var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);

                var randomFile = Path.GetTempFileName();
                var extension = Path.GetExtension(browserFile.Name);
                var targetFilePath = Path.ChangeExtension(randomFile, extension);

                var destinationStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(destinationStream);

                await GetDataTableFromExcelAsync(destinationStream);

                destinationStream.Close();
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }

        isLoading = false;
    }

    public async Task GetDataTableFromExcelAsync(FileStream file)
    {
        using (XLWorkbook workbook = new XLWorkbook(file))
        {
            errindexrow = 1;

            try
            {
                foreach (IXLWorksheet worksheet in workbook.Worksheets)
                {
                    errworksheet = worksheet.Name;

                    if (worksheet.Name == "Author")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Author author = new Author
                                {
                                    AuthorName = row.Cell(2).Value.ToString()
                                };
                            await context.Authors.AddAsync(author);
                            await context.SaveChangesAsync();
                            authorRefs.Add(new AuthorRef
                                {
                                    AuthorRefDB = author.AuthorId,
                                    AuthorRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Genre")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Genre genre = new Genre
                                {
                                    Name = row.Cell(2).Value.ToString()
                                };
                            await context.Genres.AddAsync(genre);
                            await context.SaveChangesAsync();
                            genreRefs.Add(new GenreRef
                                {
                                    GenreRefDB = genre.GenreId,
                                    GenreRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Publisher")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Publisher publisher = new Publisher
                                {
                                    PublisherName = row.Cell(2).Value.ToString(),
                                    ContactEmail = row.Cell(3).Value.ToString()
                                };
                            await context.Publishers.AddAsync(publisher);
                            await context.SaveChangesAsync();
                            publisherRefs.Add(new PublisherRef
                                {
                                    PublisherRefDB = publisher.PublisherId,
                                    PublisherRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Supplier")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Supplier supplier = new Supplier
                                {
                                    Name = row.Cell(2).Value.ToString(),
                                    Address = row.Cell(3).Value.ToString(),
                                    PhoneNumber = row.Cell(4).Value.ToString(),
                                    Email = row.Cell(5).Value.ToString()
                                };
                            await context.Suppliers.AddAsync(supplier);
                            await context.SaveChangesAsync();
                            supplierRefs.Add(new SupplierRef
                                {
                                    SupplierRefDB = supplier.SupplierId,
                                    SupplierRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Book")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Book book = new Book
                                {
                                    Title = row.Cell(2).Value.ToString(),
                                    ImageUrl = row.Cell(3).Value.ToString(),
                                    AuthorId = int.Parse(row.Cell(4).Value.ToString()),
                                    PublisherId = int.Parse(row.Cell(5).Value.ToString()),
                                    GenreId = int.Parse(row.Cell(6).Value.ToString()),
                                    Price = decimal.Parse(row.Cell(7).Value.ToString()),
                                    Description = row.Cell(8).Value.ToString(),
                                    StockQuantity = int.Parse(row.Cell(9).Value.ToString()),
                                    SupplierId = int.Parse(row.Cell(10).Value.ToString())
                                };
                            await context.Books.AddAsync(book);
                            await context.SaveChangesAsync();
                            bookRefs.Add(new BookRef
                                {
                                    BookRefDB = book.BookId,
                                    BookRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Gender")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Gender gender = new Gender
                                {
                                    GenderName = row.Cell(2).Value.ToString()
                                };
                            await context.Genders.AddAsync(gender);
                            await context.SaveChangesAsync();
                            genderRefs.Add(new GenderRef
                                {
                                    GenderRefDB = gender.Id,
                                    GenderRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "ApplicationUser")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            ApplicationUser user = new ApplicationUser
                                {
                                    LastName = row.Cell(2).Value.ToString(),
                                    FirstName = row.Cell(3).Value.ToString(),
                                    MiddleName = row.Cell(4).Value.ToString(),
                                    GenderId = int.Parse(row.Cell(5).Value.ToString()),
                                    DateBirth = DateTime.Parse(row.Cell(6).Value.ToString()),
                                    DateOfRegist = DateTime.Parse(row.Cell(7).Value.ToString()),
                                    Phone = row.Cell(8).Value.ToString(),
                                    Address = row.Cell(9).Value.ToString()
                                };
                            await context.Users.AddAsync(user);
                            await context.SaveChangesAsync();
                            userRefs.Add(new ApplicationUserRef
                                {
                                    UserRefDB = user.Id,
                                    UserRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "OrderStatus")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            OrderStatus orderStatus = new OrderStatus
                                {
                                    Status = row.Cell(2).Value.ToString()
                                };
                            await context.OrderStatuses.AddAsync(orderStatus);
                            await context.SaveChangesAsync();
                            orderStatusRefs.Add(new OrderStatusRef
                                {
                                    OrderStatusRefDB = orderStatus.OrderStatusId,
                                    OrderStatusRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Order")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Order order = new Order
                                {
                                    UserId = row.Cell(2).Value.ToString(),
                                    OrderDate = DateTime.Parse(row.Cell(3).Value.ToString()),
                                    TotalAmount = decimal.Parse(row.Cell(4).Value.ToString()),
                                    DeliveryAddress = row.Cell(5).Value.ToString(),
                                    OrderStatusId = int.Parse(row.Cell(6).Value.ToString()),
                                    PaymentTypeId = int.Parse(row.Cell(7).Value.ToString())
                                };
                            await context.Orders.AddAsync(order);
                            await context.SaveChangesAsync();
                            orderRefs.Add(new OrderRef
                                {
                                    OrderRefDB = order.OrderId,
                                    OrderRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "OrderDetail")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            OrderDetail orderDetail = new OrderDetail
                                {
                                    OrderId = int.Parse(row.Cell(2).Value.ToString()),
                                    BookId = int.Parse(row.Cell(3).Value.ToString()),
                                    Quantity = int.Parse(row.Cell(4).Value.ToString()),
                                    Price = decimal.Parse(row.Cell(5).Value.ToString())
                                };
                            await context.OrderDetails.AddAsync(orderDetail);
                            await context.SaveChangesAsync();
                            orderDetailRefs.Add(new OrderDetailRef
                                {
                                    OrderDetailRefDB = orderDetail.OrderId,
                                    BookDetailRefDB = orderDetail.BookId
                                });
                        }
                    }
                    else if (worksheet.Name == "Review")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Review review = new Review
                                {
                                    UserId = row.Cell(2).Value.ToString(),
                                    BookId = int.Parse(row.Cell(3).Value.ToString()),
                                    Rating = int.Parse(row.Cell(4).Value.ToString()),
                                    ReviewText = row.Cell(5).Value.ToString(),
                                    DatePosted = DateTime.Parse(row.Cell(6).Value.ToString())
                                };
                            await context.Reviews.AddAsync(review);
                            await context.SaveChangesAsync();
                            reviewRefs.Add(new ReviewRef
                                {
                                    ReviewRefDB = review.ReviewId,
                                    ReviewRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                    else if (worksheet.Name == "Wishlist")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Wishlist wishlist = new Wishlist
                                {
                                    UserId = row.Cell(2).Value.ToString(),
                                    BookId = int.Parse(row.Cell(3).Value.ToString())
                                };
                            await context.Wishlists.AddAsync(wishlist);
                            await context.SaveChangesAsync();
                            wishlistRefs.Add(new WishlistRef
                                {
                                    WishlistRefDB = wishlist.WishlistId,//
                                    WishlistRefExcel = int.Parse(row.Cell(1).Value.ToString())
                                });
                        }
                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = $"Ошибка в импорте в таблице {errworksheet}, строка - {errindexrow}";
                ClearDataOnError();
            }
        }
    }

    private void ClearDataOnError()
    {
        foreach (var authorRef in authorRefs)
        {
            var author = context.Authors.FirstOrDefault(a => a.AuthorId == authorRef.AuthorRefDB);
            if (author != null) context.Authors.Remove(author);
            context.SaveChanges();
        }
        authorRefs.Clear();

        foreach (var genreRef in genreRefs)
        {
            var genre = context.Genres.FirstOrDefault(g => g.GenreId == genreRef.GenreRefDB);
            if (genre != null) context.Genres.Remove(genre);
            context.SaveChanges();
        }
        genreRefs.Clear();

        foreach (var publisherRef in publisherRefs)
        {
            var publisher = context.Publishers.FirstOrDefault(p => p.PublisherId == publisherRef.PublisherRefDB);
            if (publisher != null) context.Publishers.Remove(publisher);
            context.SaveChanges();
        }
        publisherRefs.Clear();

        foreach (var supplierRef in supplierRefs)
        {
            var supplier = context.Suppliers.FirstOrDefault(s => s.SupplierId == supplierRef.SupplierRefDB);
            if (supplier != null) context.Suppliers.Remove(supplier);
            context.SaveChanges();
        }
        supplierRefs.Clear();

        foreach (var bookRef in bookRefs)
        {
            var book = context.Books.FirstOrDefault(b => b.BookId == bookRef.BookRefDB);
            if (book != null) context.Books.Remove(book);
            context.SaveChanges();
        }
        bookRefs.Clear();

        foreach (var genderRef in genderRefs)
        {
            var gender = context.Genders.FirstOrDefault(g => g.Id == genderRef.GenderRefDB);
            if (gender != null) context.Genders.Remove(gender);
            context.SaveChanges();
        }
        genderRefs.Clear();

        foreach (var userRef in userRefs)
        {
            var user = context.Users.FirstOrDefault(u => u.Id == userRef.UserRefDB);
            if (user != null) context.Users.Remove(user);
            context.SaveChanges();
        }
        userRefs.Clear();

        foreach (var orderStatusRef in orderStatusRefs)
        {
            var orderStatus = context.OrderStatuses.FirstOrDefault(o => o.OrderStatusId == orderStatusRef.OrderStatusRefDB);
            if (orderStatus != null) context.OrderStatuses.Remove(orderStatus);
            context.SaveChanges();
        }
        orderStatusRefs.Clear();

        foreach (var orderRef in orderRefs)
        {
            var order = context.Orders.FirstOrDefault(o => o.OrderId == orderRef.OrderRefDB);
            if (order != null) context.Orders.Remove(order);
            context.SaveChanges();
        }
        orderRefs.Clear();

        foreach (var orderDetailRef in orderDetailRefs)
        {
            var orderDetail = context.OrderDetails
                                     .FirstOrDefault(od => od.OrderId == orderDetailRef.OrderDetailRefDB &&
                                                           od.BookId == orderDetailRef.BookDetailRefDB);
            if (orderDetail != null) context.OrderDetails.Remove(orderDetail);
            context.SaveChanges();
        }
        orderDetailRefs.Clear();

        foreach (var reviewRef in reviewRefs)
        {
            var review = context.Reviews.FirstOrDefault(r => r.ReviewId == reviewRef.ReviewRefDB);
            if (review != null) context.Reviews.Remove(review);
            context.SaveChanges();
        }
        reviewRefs.Clear();

        foreach (var wishlistRef in wishlistRefs)
        {
            var wishlist = context.Wishlists.FirstOrDefault(w => w.BookId == wishlistRef.WishlistRefDB);
            if (wishlist != null) context.Wishlists.Remove(wishlist);
            context.SaveChanges();
        }
        wishlistRefs.Clear();
    }
    // Метод для безопасного преобразования строки в DateTime
    private DateTime? TryParseDate(string? dateString)
    {
        if (DateTime.TryParse(dateString, out DateTime parsedDate))
        {
            return parsedDate;
        }
        return null;
    }
}
