@page "/exportexcel"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@implements IAsyncDisposable
@inject IJSRuntime js

<button type="button" class="btn btn-success mb-2" @onclick="@ExportXLS">Экспорт всех таблиц в Excel</button>

@code {
    BookShop.Data.ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
    }

    public async Task ExportXLS()
    {
        try
        {
            var XLSStream = ExportXLSData();
            await js.InvokeVoidAsync("BlazorDownloadFile", "данные.xlsx", XLSStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private byte[] ExportXLSData()
    {
        using var workbook = new XLWorkbook();

        // 1. Gender (Нет зависимостей)
        var worksheetGender = workbook.Worksheets.Add("Gender");
        worksheetGender.Cell(1, 1).Value = "Идентификатор пола";
        worksheetGender.Cell(1, 2).Value = "Название пола";
        worksheetGender.Row(1).Style.Font.Bold = true;
        int i = 2;
        foreach (var gender in context.Genders)
        {
            worksheetGender.Cell(i, 1).Value = gender.Id;
            worksheetGender.Cell(i, 2).Value = gender.GenderName;
            i++;
        }

        // 2. ApplicationUser (Зависит от Gender)
        var worksheetUser = workbook.Worksheets.Add("User");
        worksheetUser.Cell(1, 1).Value = "Идентификатор пользователя";
        worksheetUser.Cell(1, 2).Value = "Фамилия";
        worksheetUser.Cell(1, 3).Value = "Имя";
        worksheetUser.Cell(1, 4).Value = "Отчество";
        worksheetUser.Cell(1, 5).Value = "Идентификатор пола";
        worksheetUser.Cell(1, 6).Value = "Дата рождения";
        worksheetUser.Cell(1, 7).Value = "Дата регистрации";
        worksheetUser.Cell(1, 8).Value = "Телефон";
        worksheetUser.Cell(1, 9).Value = "Адрес";
        worksheetUser.Cell(1, 10).Value = "Имя пользователя";
        worksheetUser.Cell(1, 11).Value = "Имя пользователя (normalized)";
        worksheetUser.Cell(1, 12).Value = "Emai";
        worksheetUser.Cell(1, 13).Value = "Email (normalized)";
        worksheetUser.Cell(1, 14).Value = "Подтвержден email";
        worksheetUser.Cell(1, 15).Value = "Hash пароля";

        worksheetUser.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var user in context.Users)
        {
            worksheetUser.Cell(i, 1).Value = user.Id;
            worksheetUser.Cell(i, 2).Value = user.LastName;
            worksheetUser.Cell(i, 3).Value = user.FirstName;
            worksheetUser.Cell(i, 4).Value = user.MiddleName;
            worksheetUser.Cell(i, 5).Value = user.GenderId;
            worksheetUser.Cell(i, 6).Value = user.DateBirth?.ToString("dd.MM.yyyy");
            worksheetUser.Cell(i, 7).Value = user.DateOfRegist.ToString("dd.MM.yyyy");
            worksheetUser.Cell(i, 8).Value = user.Phone;
            worksheetUser.Cell(i, 9).Value = user.Address;
            worksheetUser.Cell(i, 10).Value = user.UserName;
            worksheetUser.Cell(i, 11).Value = user.NormalizedUserName; // Добавлено
            worksheetUser.Cell(i, 12).Value = user.Email;
            worksheetUser.Cell(i, 13).Value = user.NormalizedEmail;    // Добавлено
            worksheetUser.Cell(i, 14).Value = user.EmailConfirmed;   // Добавлено
            worksheetUser.Cell(i, 15).Value = user.PasswordHash;
            i++;
        }

        // 3. Author (Нет зависимостей)
        var worksheetAuthor = workbook.Worksheets.Add("Author");
        worksheetAuthor.Cell(1, 1).Value = "Идентификатор автора";
        worksheetAuthor.Cell(1, 2).Value = "Полное имя автора";
        worksheetAuthor.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var author in context.Authors)
        {
            worksheetAuthor.Cell(i, 1).Value = author.AuthorId;
            worksheetAuthor.Cell(i, 2).Value = author.AuthorName;
            i++;
        }

        // 4. Publisher (Нет зависимостей)
        var worksheetPublisher = workbook.Worksheets.Add("Publisher");
        worksheetPublisher.Cell(1, 1).Value = "Идентификатор издательства";
        worksheetPublisher.Cell(1, 2).Value = "Название издательства";
        worksheetPublisher.Cell(1, 3).Value = "Почта для связи";
        worksheetPublisher.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var publisher in context.Publishers)
        {
            worksheetPublisher.Cell(i, 1).Value = publisher.PublisherId;
            worksheetPublisher.Cell(i, 2).Value = publisher.PublisherName;
            worksheetPublisher.Cell(i, 3).Value = publisher.ContactEmail;
            i++;
        }

        // 5. Genre (Нет зависимостей)
        var worksheetGenre = workbook.Worksheets.Add("Genre");
        worksheetGenre.Cell(1, 1).Value = "Идентификатор жанра";
        worksheetGenre.Cell(1, 2).Value = "Название жанра";
        worksheetGenre.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var genre in context.Genres)
        {
            worksheetGenre.Cell(i, 1).Value = genre.GenreId;
            worksheetGenre.Cell(i, 2).Value = genre.Name;
            i++;
        }

        // 6. Supplier (Нет зависимостей)
        var worksheetSupplier = workbook.Worksheets.Add("Supplier");
        worksheetSupplier.Cell(1, 1).Value = "Идентификатор поставщика";
        worksheetSupplier.Cell(1, 2).Value = "Название";
        worksheetSupplier.Cell(1, 3).Value = "Адрес";
        worksheetSupplier.Cell(1, 4).Value = "Телефон";
        worksheetSupplier.Cell(1, 5).Value = "Электронная почта";
        worksheetSupplier.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var supplier in context.Suppliers)
        {
            worksheetSupplier.Cell(i, 1).Value = supplier.SupplierId;
            worksheetSupplier.Cell(i, 2).Value = supplier.Name;
            worksheetSupplier.Cell(i, 3).Value = supplier.Address;
            worksheetSupplier.Cell(i, 4).Value = supplier.PhoneNumber;
            worksheetSupplier.Cell(i, 5).Value = supplier.Email;
            i++;
        }

        // 7. Book (Зависит от Author, Publisher, Genre, Supplier)
        var worksheetBook = workbook.Worksheets.Add("Book");
        worksheetBook.Cell(1, 1).Value = "Идентификатор книги";
        worksheetBook.Cell(1, 2).Value = "Фото книги";
        worksheetBook.Cell(1, 3).Value = "Название";
        worksheetBook.Cell(1, 4).Value = "Идентификатор автора";
        worksheetBook.Cell(1, 5).Value = "Идентификатор издательства";
        worksheetBook.Cell(1, 6).Value = "Идентификатор жанра";
        worksheetBook.Cell(1, 7).Value = "Цена";
        worksheetBook.Cell(1, 8).Value = "Описание";
        worksheetBook.Cell(1, 9).Value = "Количество";
        worksheetBook.Cell(1, 10).Value = "Идентификатор поставщика";
        worksheetBook.Cell(1, 11).Value = "Средний рейтинг";
        worksheetBook.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var book in context.Books.Include(b => b.Author).Include(b => b.Publisher).Include(b => b.Genre).Include(b => b.Supplier))
        {
            worksheetBook.Cell(i, 1).Value = book.BookId;
            worksheetBook.Cell(i, 2).Value = book.ImageUrl;
            worksheetBook.Cell(i, 3).Value = book.Title;
            worksheetBook.Cell(i, 4).Value = book.AuthorId;
            worksheetBook.Cell(i, 5).Value = book.PublisherId;
            worksheetBook.Cell(i, 6).Value = book.GenreId;
            worksheetBook.Cell(i, 7).Value = book.Price;
            worksheetBook.Cell(i, 8).Value = book.Description;
            worksheetBook.Cell(i, 9).Value = book.StockQuantity;
            worksheetBook.Cell(i, 10).Value = book.SupplierId;
            worksheetBook.Cell(i, 11).Value = book.AverageRating;
            i++;
        }

        // 8. Cart (Зависит от ApplicationUser)
        var worksheetCart = workbook.Worksheets.Add("Cart");
        worksheetCart.Cell(1, 1).Value = "Идентификатор корзины";
        worksheetCart.Cell(1, 2).Value = "Идентификатор пользователя";
        worksheetCart.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var cart in context.Carts)
        {
            worksheetCart.Cell(i, 1).Value = cart.CartId;
            worksheetCart.Cell(i, 2).Value = cart.UserId;
            i++;
        }

        // 9. CartItem (Зависит от Cart и Book)
        var worksheetCartItem = workbook.Worksheets.Add("CartItem");
        worksheetCartItem.Cell(1, 1).Value = "Идентификатор элемента корзины";
        worksheetCartItem.Cell(1, 2).Value = "Идентификатор корзины";
        worksheetCartItem.Cell(1, 3).Value = "Идентификатор книги";
        worksheetCartItem.Cell(1, 4).Value = "Количество";
        worksheetCartItem.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var cartItem in context.CartItems)
        {
            worksheetCartItem.Cell(i, 1).Value = cartItem.CartItemId;
            worksheetCartItem.Cell(i, 2).Value = cartItem.CartId;
            worksheetCartItem.Cell(i, 3).Value = cartItem.BookId;
            worksheetCartItem.Cell(i, 4).Value = cartItem.Quantity;
            i++;
        }

        // 10. OrderStatus (Нет зависимостей)
        var worksheetOrderStatus = workbook.Worksheets.Add("OrderStatus");
        worksheetOrderStatus.Cell(1, 1).Value = "Идентификатор статуса заказа";
        worksheetOrderStatus.Cell(1, 2).Value = "Статус";
        worksheetOrderStatus.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var orderStatus in context.OrderStatuses)
        {
            worksheetOrderStatus.Cell(i, 1).Value = orderStatus.OrderStatusId;
            worksheetOrderStatus.Cell(i, 2).Value = orderStatus.Status;
            i++;
        }

        // 11. PaymentType (Нет зависимостей)
        var worksheetPaymentType = workbook.Worksheets.Add("PaymentType");
        worksheetPaymentType.Cell(1, 1).Value = "Идентификатор типа оплаты";
        worksheetPaymentType.Cell(1, 2).Value = "Название типа оплаты";
        worksheetPaymentType.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var paymentType in context.PaymentTypes)
        {
            worksheetPaymentType.Cell(i, 1).Value = paymentType.PaymentTypeId;
            worksheetPaymentType.Cell(i, 2).Value = paymentType.Name;
            i++;
        }

        // 12. Order (Зависит от ApplicationUser, OrderStatus, PaymentType)
        var worksheetOrder = workbook.Worksheets.Add("Order");
        worksheetOrder.Cell(1, 1).Value = "Идентификатор заказа";
        worksheetOrder.Cell(1, 2).Value = "Идентификатор пользователя";
        worksheetOrder.Cell(1, 3).Value = "Дата заказа";
        worksheetOrder.Cell(1, 4).Value = "Общая цена";
        worksheetOrder.Cell(1, 5).Value = "Адрес доставки";
        worksheetOrder.Cell(1, 6).Value = "Идентификатор статуса заказа";
        worksheetOrder.Cell(1, 7).Value = "Идентификатор типа оплаты";
        worksheetOrder.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var order in context.Orders)
        {
            worksheetOrder.Cell(i, 1).Value = order.OrderId;
            worksheetOrder.Cell(i, 2).Value = order.UserId;
            worksheetOrder.Cell(i, 3).Value = order.OrderDate;
            worksheetOrder.Cell(i, 4).Value = order.TotalAmount;
            worksheetOrder.Cell(i, 5).Value = order.DeliveryAddress;
            worksheetOrder.Cell(i, 6).Value = order.OrderStatusId;
            worksheetOrder.Cell(i, 7).Value = order.PaymentTypeId;
            i++;
        }

        // 13. OrderDetail (Зависит от Order и Book)
        var worksheetOrderDetail = workbook.Worksheets.Add("OrderDetail");
        worksheetOrderDetail.Cell(1, 1).Value = "Идентификатор заказа";
        worksheetOrderDetail.Cell(1, 2).Value = "Идентификатор книги";
        worksheetOrderDetail.Cell(1, 3).Value = "Количество";
        worksheetOrderDetail.Cell(1, 4).Value = "Цена";
        worksheetOrderDetail.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var orderDetail in context.OrderDetails)
        {
            worksheetOrderDetail.Cell(i, 1).Value = orderDetail.OrderId;
            worksheetOrderDetail.Cell(i, 2).Value = orderDetail.BookId;
            worksheetOrderDetail.Cell(i, 3).Value = orderDetail.Quantity;
            worksheetOrderDetail.Cell(i, 4).Value = orderDetail.Price;
            i++;
        }

        // 14. Review (Зависит от ApplicationUser и Book)
        var worksheetReview = workbook.Worksheets.Add("Review");
        worksheetReview.Cell(1, 1).Value = "Идентификатор отзыва";
        worksheetReview.Cell(1, 2).Value = "Идентификатор пользователя";
        worksheetReview.Cell(1, 3).Value = "Идентификатор книги";
        worksheetReview.Cell(1, 4).Value = "Рейтинг";
        worksheetReview.Cell(1, 5).Value = "Текст отзыва";
        worksheetReview.Cell(1, 6).Value = "Дата отзыва";
        worksheetReview.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var review in context.Reviews)
        {
            worksheetReview.Cell(i, 1).Value = review.ReviewId;
            worksheetReview.Cell(i, 2).Value = review.UserId;
            worksheetReview.Cell(i, 3).Value = review.BookId;
            worksheetReview.Cell(i, 4).Value = review.Rating;
            worksheetReview.Cell(i, 5).Value = review.ReviewText;
            worksheetReview.Cell(i, 6).Value = review.DatePosted;
            i++;
        }

        // 15. Wishlist (Зависит от ApplicationUser и Book)
        var worksheetWishlist = workbook.Worksheets.Add("Wishlist");
        worksheetWishlist.Cell(1, 1).Value = "Идентификатор избранного";
        worksheetWishlist.Cell(1, 2).Value = "Идентификатор пользователя";
        worksheetWishlist.Cell(1, 3).Value = "Идентификатор книги";
        worksheetWishlist.Row(1).Style.Font.Bold = true;
        i = 2;
        foreach (var wishlist in context.Wishlists)
        {
            worksheetWishlist.Cell(i, 1).Value = wishlist.WishlistId;
            worksheetWishlist.Cell(i, 2).Value = wishlist.UserId;
            worksheetWishlist.Cell(i, 3).Value = wishlist.BookId;
            i++;
        }

        MemoryStream XLSStream = new();
        workbook.SaveAs(XLSStream);
        return XLSStream.ToArray();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}