@page "/mywishlist"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Избранное</PageTitle>

<h1>Избранное</h1>

@if (wishlists == null)
{
    <p>Загрузка...</p>
}
else if (!wishlists.Any())
{
    <p>@(isAdmin ? "Список избранного пуст." : "Ваш список избранного пуст.")</p>
}
else
{
    <ul class="wishlist-list">
        @foreach (var wishlist in wishlists)
        {
            <li>
                <img src="@wishlist.Book.ImageUrl" alt="Book Image" class="book-image" />
                <div>
                    <p><strong>Название:</strong> @wishlist.Book.Title</p>
                    <p><strong>Автор:</strong> @wishlist.Book.Author.AuthorName</p>
                    <p><strong>Жанр:</strong> @wishlist.Book.Genre.Name</p>
                    <p><strong>Цена:</strong> @wishlist.Book.Price руб.</p>
                    @if (isAdmin)
                    {
                        <p><strong>Пользователь:</strong> @wishlist.User.UserName</p>
                    }
                    <button class="btn btn-danger" @onclick="() => RemoveFromWishlist(wishlist.WishlistId)">Удалить</button>
                </div>
            </li>
        }
    </ul>
}

@code {
    private List<Wishlist>? wishlists;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                isAdmin = user.IsInRole("Admin");
                var userId = user.FindFirst(c => c.Type == "sub")?.Value;

                using var context = DbFactory.CreateDbContext();

                if (isAdmin)
                {
                    // Загрузка всех данных для администратора
                    wishlists = await context.Wishlists
                        .Include(w => w.Book)
                            .ThenInclude(b => b.Author)
                        .Include(w => w.Book.Genre)
                        .Include(w => w.User)
                        .ToListAsync();
                }
                else if (!string.IsNullOrEmpty(userId))
                {
                    // Загрузка данных для текущего пользователя
                    wishlists = await context.Wishlists
                        .Where(w => w.UserId == userId)
                        .Include(w => w.Book)
                            .ThenInclude(b => b.Author)
                        .Include(w => w.Book.Genre)
                        .Include(w => w.User)
                        .ToListAsync();
                }

                // Отладочный вывод
                Console.WriteLine($"Загружено записей: {wishlists?.Count ?? 0}");
            }
            else
            {
                wishlists = new List<Wishlist>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    private async Task RemoveFromWishlist(int wishlistId)
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            var wishlistItem = await context.Wishlists.FindAsync(wishlistId);

            if (wishlistItem != null)
            {
                context.Wishlists.Remove(wishlistItem);
                await context.SaveChangesAsync();

                wishlists?.Remove(wishlistItem);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении: {ex.Message}");
        }
    }
}
