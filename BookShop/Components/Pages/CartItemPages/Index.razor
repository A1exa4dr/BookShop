@page "/cartitems"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BookShop.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Детали корзины</PageTitle>

<h1>Детали корзины</h1>

@* <p>
    <a href="cartitems/create">Create New</a>
</p> *@
<p>
    <a href="carts">Возврат к списку корзин</a>
</p>
<QuickGrid Class="table" Items="context.CartItems.Include(ci => ci.Book).Where(t=>t.CartId==CartId)">
    @* <PropertyColumn Property="cartitem => cartitem.CartItemId" /> *@
    <PropertyColumn Property="cartitem => cartitem.CartId" />
    <TemplateColumn Title="Фото">
        @if (!string.IsNullOrWhiteSpace(context.Book.ImageUrl))
        {
            <img src="@context.Book.ImageUrl" alt="Book Image" style="max-width: 100px; max-height: 100px;" />
        }
        else
        {
            <span>Нет изображения</span>
        }
    </TemplateColumn>
    <TemplateColumn Title="Название книги" Context="cartitem">@cartitem.Book.Title</TemplateColumn>
    <PropertyColumn Property="cartitem => cartitem.Quantity" Title="Количество" />
    <TemplateColumn Title="Цена книги" Context="cartitem">@cartitem.Book.Price</TemplateColumn>
    <TemplateColumn Title="Общая цена" Context="cartitem">
        @((cartitem.Quantity * cartitem.Book.Price).ToString("C"))
    </TemplateColumn>
</QuickGrid>

@code {
    [SupplyParameterFromQuery]
    public int? CartId { get; set; }

    public string? UserId { get; set; }

    private ApplicationDbContext context = default!;

    // private List<CartItem> cartItems = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     context = DbFactory.CreateDbContext();
    //     cartItems = await context.CartItems
    //         .Include(ci => ci.Cart)
    //         .Include(ci => ci.Book) // Подгружаем данные о книге
    //         .ToListAsync();
    // }
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

        if (CartId == null)
        {
            NavigationManager.NavigateTo("not found");
        }
        {
            Cart? send = context.Carts.FirstOrDefault(d => d.CartId == CartId);

            if (send == null)
            {
                NavigationManager.NavigateTo("not found");
            }

            UserId = send?.UserId;
            
              /* по идее это всё надо написать, тк оно как я понимаю присваивается QuickGrid */
             /* который сверху, но если всё это убрать, то всё равно всё будет работать */
            /* для срабатывания сортировки достаточно прописать только это (40-41 строки):  [SupplyParameterFromQuery]
                                                                                       public int? SenderId { get; set; } */
        }
    }
    
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
