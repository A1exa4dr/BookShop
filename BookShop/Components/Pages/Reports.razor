@page "/reports"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@using System.Globalization
@using ClosedXML.Excel
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Отчеты</PageTitle>
<link href="css/reports.css" rel="stylesheet">

<h1>Отчеты</h1>

<div class="report-container">
    <h2>Формирование отчетов</h2>

    <div class="filters-row align-items-end">
        <div class="filter-item">
            <label>Тип отчета:</label>
            <select @bind="selectedReportType" class="form-select">
                <option value="sales">Продажи</option>
                <option value="orders">Заказы</option>
                <option value="users">Пользователи</option>
            </select>
        </div>

        <div class="filter-item">
            <label>Дата начала:</label>
            <input type="date" @bind="startDate" class="form-control" />
        </div>

        <div class="filter-item">
            <label>Дата окончания:</label>
            <input type="date" @bind="endDate" class="form-control" />
        </div>

        <button class="btn btn-primary" @onclick="GenerateReport">Сформировать отчет</button>
        <button class="btn btn-success" @onclick="DownloadExcel">Скачать Excel</button>
    </div>

    <div class="report-results">
        @if (errorMessage != null)
        {
            <p class="text-danger">@errorMessage</p>
        }

        @if (isLoading)
        {
            <p><em>Загрузка данных...</em></p>
        }
        else if (reportData.Any())
        {
            <h3>Результаты отчета</h3>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        @foreach (var header in reportHeaders)
                        {
                            <th>@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in reportData)
                    {
                        <tr class="@row.LastOrDefault()" @onclick="() => ShowUserOrders(row[0])">
                            @for (int i = 0; i < row.Count - 1; i++) @* Исключаем последний элемент (маркер) *@
                            {
                                <td>
                                    @if (row[i].StartsWith("<strong>") && row[i].EndsWith("</strong>"))
                                    {
                                        @((MarkupString)row[i]) <!-- Отображаем HTML-разметку -->
                                    }
                                    else
                                    {
                                        @row[i]
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>

            @if (selectedReportType == "sales")
            {
                <p><strong>Общая сумма продаж за период:</strong> @totalSalesAmount.ToString("C")</p>
            }
        }
        else
        {
            <p>Нет данных для отображения.</p>
        }

        <!-- Подтаблица с заказами выбранного пользователя -->
        @if (selectedReportType == "users" && selectedUserOrders != null && selectedUserOrders.Any())
        {
            <h4>Заказы пользователя: @selectedUserName</h4>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>ID заказа</th>
                        <th>Дата</th>
                        <th>Статус</th>
                        <th>Общая сумма</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in selectedUserOrders)
                    {
                        <tr>
                            <td>@order.OrderId</td>
                            <td>@order.OrderDate.ToString("dd.MM.yyyy")</td>
                            <td>@order.OrderStatus.Status</td>
                            <td>@order.TotalAmount.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private string selectedReportType = "sales"; // Тип отчета
    private DateTime? startDate; // Дата начала
    private DateTime? endDate; // Дата окончания

    private bool isLoading = false; // Флаг загрузки
    private string errorMessage = null; // Сообщение об ошибке
    private List<string> reportHeaders = new(); // Заголовки таблицы
    private List<List<string>> reportData = new(); // Данные отчета
    private decimal totalSalesAmount = 0; // Общая сумма продаж
    private Dictionary<string, decimal> monthlyTotals = new(); // Подитоги по месяцам

    private string selectedUserName = null; // Выбранный пользователь
    private List<Order> selectedUserOrders = new(); // Заказы выбранного пользователя

    protected override void OnInitialized()
    {
        // Устанавливаем даты по умолчанию
        startDate = DateTime.Now.AddMonths(-1); // Месяц назад
        endDate = DateTime.Now;
    }

    private async Task GenerateReport()
    {
        if (!startDate.HasValue || !endDate.HasValue)
        {
            errorMessage = "Пожалуйста, выберите дату начала и окончания.";
            return;
        }

        isLoading = true;
        reportHeaders.Clear();
        reportData.Clear();
        totalSalesAmount = 0; // Сброс общей суммы
        monthlyTotals.Clear(); // Очистка подитогов
        errorMessage = null;

        using var context = DbFactory.CreateDbContext();

        try
        {
            switch (selectedReportType)
            {
                case "sales":
                    await GenerateSalesReport(context);
                    break;

                case "orders":
                    await GenerateOrdersReport(context);
                    break;

                case "users": // Логика для нового отчета
                    await GenerateUsersReport(context);
                    break;

                default:
                    errorMessage = "Неизвестный тип отчета.";
                    break;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при формировании отчета: {ex.Message}";
        }

        isLoading = false;
    }

    private async Task DownloadExcel()
    {
        if (!reportData.Any())
        {
            errorMessage = "Нет данных для экспорта.";
            return;
        }

        try
        {
            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Отчет");

            // Записываем заголовки
            for (int i = 0; i < reportHeaders.Count; i++)
            {
                worksheet.Cell(1, i + 1).Value = reportHeaders[i];
            }

            // Записываем данные
            for (int row = 0; row < reportData.Count; row++)
            {
                for (int col = 0; col < reportData[row].Count - 1; col++) // Исключаем последний элемент (маркер)
                {
                    worksheet.Cell(row + 2, col + 1).Value = reportData[row][col];
                }
            }

            // Автоматическая ширина столбцов
            worksheet.Columns().AdjustToContents();

            // Сохраняем файл
            var fileName = $"{selectedReportType}_report_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;

            // Скачивание файла
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(stream.ToArray()));
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка при экспорте в Excel: {ex.Message}";
        }
    }

    private async Task GenerateUsersReport(ApplicationDbContext context)
    {
        reportHeaders = new List<string>
        {
            "Имя пользователя", "Количество заказов", "Общая сумма заказов", "Средний чек"
        };

        var usersData = await context.Users
            .Select(u => new
            {
                UserName = u.UserName,
                Orders = u.Orders.Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate),
                TotalAmount = u.Orders.Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate).Sum(o => (double?)o.TotalAmount), // Преобразуем в double
                OrderCount = u.Orders.Count(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
            })
            .Where(u => u.OrderCount > 0) // Включаем только пользователей с заказами
            .ToListAsync();

        foreach (var user in usersData)
        {
            var averageCheck = user.OrderCount > 0 ? (decimal)(user.TotalAmount ?? 0) / user.OrderCount : 0;

            reportData.Add(new List<string>
            {
                user.UserName,
                user.OrderCount.ToString(),
                ((decimal)(user.TotalAmount ?? 0)).ToString("C"), // Преобразуем обратно в decimal
                averageCheck.ToString("C"),
                string.Empty // Маркер для обычной строки
            });
        }
    }

    private async Task ShowUserOrders(string userName)
    {
        // Проверяем, что текущий тип отчета — "Пользователи"
        if (selectedReportType != "users")
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();

        var user = await context.Users
            .Include(u => u.Orders)
            .ThenInclude(o => o.OrderStatus)
            .FirstOrDefaultAsync(u => u.UserName == userName);

        if (user != null)
        {
            selectedUserName = userName;
            selectedUserOrders = user.Orders
                .Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
                .OrderByDescending(o => o.OrderDate)
                .ToList();
        }
        else
        {
            selectedUserName = null;
            selectedUserOrders = new List<Order>();
        }

        StateHasChanged();
    }

    private async Task GenerateSalesReport(ApplicationDbContext context)
    {
        reportHeaders = new List<string>
        {
            "Дата", "Книга", "Количество", "Общая сумма"
        };

        var salesData = await context.OrderDetails
            .Where(od => od.Order.OrderDate >= startDate && od.Order.OrderDate <= endDate)
            .Select(od => new
            {
                OrderDate = od.Order.OrderDate,
                BookTitle = od.Book.Title,
                Quantity = od.Quantity,
                Price = od.Price
            })
            .OrderBy(od => od.OrderDate)
            .ToListAsync();

        totalSalesAmount = 0; // Сбрасываем общую сумму перед новым расчетом
        monthlyTotals.Clear(); // Очищаем подитоги

        foreach (var item in salesData)
        {
            var monthKey = item.OrderDate.ToString("yyyy-MM"); // Ключ для месяца (например, "2023-10")

            // Если месяц изменился, добавляем подитог для предыдущего месяца
            if (monthlyTotals.ContainsKey(monthKey))
            {
                monthlyTotals[monthKey] += item.Quantity * item.Price;
            }
            else
            {
                monthlyTotals[monthKey] = item.Quantity * item.Price;
            }

            // Добавляем данные в таблицу
            var totalItemAmount = item.Quantity * item.Price;
            reportData.Add(new List<string>
            {
                item.OrderDate.ToString("dd.MM.yyyy"),
                item.BookTitle,
                item.Quantity.ToString(),
                totalItemAmount.ToString("C"),
                string.Empty // Маркер для обычной строки
            });

            totalSalesAmount += totalItemAmount; // Добавляем к общей сумме
        }

        // Добавляем подитоги для всех месяцев
        foreach (var month in monthlyTotals)
        {
            AddMonthlySubtotal(month.Key, month.Value);
        }
    }

    private void AddMonthlySubtotal(string monthKey, decimal subtotal)
    {
        var year = int.Parse(monthKey.Substring(0, 4));
        var month = int.Parse(monthKey.Substring(5, 2));
        var monthName = GetMonthName(month);

        reportData.Add(new List<string>
        {
            $"<strong>Подитог за {year} {monthName}</strong>", // Жирный текст
            string.Empty,
            string.Empty,
            $"<strong>{subtotal.ToString("C")}</strong>",
            "subtotal-row" // Маркер для стиля
        });
    }

    private string GetMonthName(int monthNumber)
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthNumber);
    }

    private async Task GenerateOrdersReport(ApplicationDbContext context)
    {
        reportHeaders = new List<string>
        {
            "ID заказа", "Дата", "Статус", "Общая сумма"
        };

        var ordersData = await context.Orders
            .Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
            .Select(o => new
            {
                OrderId = o.OrderId,
                OrderDate = o.OrderDate,
                Status = o.OrderStatus == null ? "Неизвестно" : o.OrderStatus.Status,
                TotalAmount = o.TotalAmount
            })
            .ToListAsync();

        foreach (var order in ordersData)
        {
            reportData.Add(new List<string>
            {
                order.OrderId.ToString(),
                order.OrderDate.ToString("dd.MM.yyyy"),
                order.Status,
                order.TotalAmount.ToString("C"),
                string.Empty // Маркер для обычной строки
            });
        }
    }
}