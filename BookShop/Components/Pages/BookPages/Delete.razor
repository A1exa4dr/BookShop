@page "/books/delete"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Удалить книгу</PageTitle>

<h1>Удалить книгу</h1>

<p>Вы точно хотите удалить эту книгу?</p>
<div>
    <h2>Книга</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Изображение:</dt>
            <dd class="col-sm-10">@book.ImageUrl</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Название</dt>
            <dd class="col-sm-10">@book.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Автор:</dt>
            <dd class="col-sm-10">@book.AuthorId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Издательство:</dt>
            <dd class="col-sm-10">@book.PublisherId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Жанр:</dt>
            <dd class="col-sm-10">@book.GenreId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Цена:</dt>
            <dd class="col-sm-10">@book.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Описание</dt>
            <dd class="col-sm-10">@book.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Колтчество на складе</dt>
            <dd class="col-sm-10">@book.StockQuantity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Поставщик</dt>
            <dd class="col-sm-10">@book.SupplierId</dd>
        </dl>
        <EditForm method="post" Model="book" OnValidSubmit="DeleteBook" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(book is null)">Удалить</button> |
            <a href="/books">Обратно в каталог</a>
        </EditForm>
    }
</div>

@code {
    private Book? book;

    [SupplyParameterFromQuery]
    private int BookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Books.FirstOrDefaultAsync(m => m.BookId == BookId);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Books.Remove(book!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
