@page "/books/create"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Book</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            @* <div class="mb-3">
                <label for="imageurl" class="form-label">ImageUrl:</label> 
                <InputText id="imageurl" @bind-Value="Book.ImageUrl" class="form-control" /> 
                <ValidationMessage For="() => Book.ImageUrl" class="text-danger" /> 
            </div> *@ 

            <div class="mb-3">
                <label for="title" class="form-label">Название:</label> 
                <InputText id="title" @bind-Value="Book.Title" class="form-control" /> 
                <ValidationMessage For="() => Book.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="authorid" class="form-label">Автор:</label>
                <select id="authorid" @bind="Book.AuthorId" class="form-control">
                    <option value="">Select an author</option>
                    @foreach (var author in Authors)
                    {
                        <option value="@author.AuthorId">@author.AuthorName</option>
                    }
                </select>
                <ValidationMessage For="() => Book.AuthorId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="publisherid" class="form-label">Издательство:</label>
                <InputSelect id="publisherid" @bind-Value="Book.PublisherId" class="form-control">
                    <option value="">-- Select Publisher --</option>
                    @foreach (var publisher in Publishers)
                    {
                        <option value="@publisher.PublisherId">@publisher.PublisherName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Book.PublisherId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="genreid" class="form-label">Жанр:</label>
                <select id="genreid" @bind="Book.GenreId" class="form-control">
                    <option value="">Select a genre</option>
                    @foreach (var genre in Genres)
                    {
                        <option value="@genre.GenreId">@genre.Name</option>
                    }
                </select>
                <ValidationMessage For="() => Book.GenreId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Цена:</label> 
                <InputNumber id="price" @bind-Value="Book.Price" class="form-control" /> 
                <ValidationMessage For="() => Book.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Описание:</label> 
                <InputText id="description" @bind-Value="Book.Description" class="form-control" /> 
                <ValidationMessage For="() => Book.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="stockquantity" class="form-label">Количество на складе:</label> 
                <InputNumber id="stockquantity" @bind-Value="Book.StockQuantity" class="form-control" /> 
                <ValidationMessage For="() => Book.StockQuantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="supplierid" class="form-label">Поставщик:</label>
                <select id="supplierid" @bind="Book.SupplierId" class="form-control">
                    <option value="">Select a supplier</option>
                    @foreach (var supplier in Suppliers)
                    {
                        <option value="@supplier.SupplierId">@supplier.Name</option>
                    }
                </select>
                <ValidationMessage For="() => Book.SupplierId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="image" class="form-label">Загрузить изображение:</label>
                <InputFile id="image" OnChange="HandleImageUpload" />
                @if (!string.IsNullOrEmpty(previewImage))
                {
                    <div class="mt-2">
                        <img src="@previewImage" alt="Preview" style="max-width: 200px; max-height: 200px;" />
                    </div>
                }
            </div>
            <button type="submit" class="btn btn-primary">Добавить</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();
    private List<Author> Authors { get; set; } = new();
    private List<Publisher> Publishers { get; set; } = new();
    private List<Genre> Genres { get; set; } = new();
    private List<Supplier> Suppliers { get; set; } = new();
    private string? previewImage; // Для предварительного просмотра изображения
    private IBrowserFile? uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Authors = await context.Authors.ToListAsync();
        Publishers = await context.Publishers.ToListAsync();
        Genres = await context.Genres.ToListAsync();
        Suppliers = await context.Suppliers.ToListAsync();
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;

        // Создание предварительного просмотра изображения
        var buffer = new byte[uploadedFile.Size];
        await uploadedFile.OpenReadStream().ReadAsync(buffer);
        previewImage = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBook()
    {
        if (uploadedFile != null)
        {
            var filePath = Path.Combine("wwwroot", "images", uploadedFile.Name);

            // Сохранение файла на сервере
            await using var stream = new FileStream(filePath, FileMode.Create);
            await uploadedFile.OpenReadStream().CopyToAsync(stream);

            // Сохранение пути к файлу в базе данных
            Book.ImageUrl = $"/images/{uploadedFile.Name}";
        }

        using var context = DbFactory.CreateDbContext();
        context.Books.Add(Book);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
