@page "/books/create"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Book</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="imageurl" class="form-label">ImageUrl:</label> 
                <InputText id="imageurl" @bind-Value="Book.ImageUrl" class="form-control" /> 
                <ValidationMessage For="() => Book.ImageUrl" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Book.Title" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Book.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="authorid" class="form-label">AuthorId:</label> 
                <InputNumber id="authorid" @bind-Value="Book.AuthorId" class="form-control" /> 
                <ValidationMessage For="() => Book.AuthorId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="publisherid" class="form-label">PublisherId:</label> 
                <InputNumber id="publisherid" @bind-Value="Book.PublisherId" class="form-control" /> 
                <ValidationMessage For="() => Book.PublisherId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="genreid" class="form-label">GenreId:</label> 
                <InputNumber id="genreid" @bind-Value="Book.GenreId" class="form-control" /> 
                <ValidationMessage For="() => Book.GenreId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label> 
                <InputNumber id="price" @bind-Value="Book.Price" class="form-control" /> 
                <ValidationMessage For="() => Book.Price" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Book.Description" class="form-control" /> 
                <ValidationMessage For="() => Book.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="stockquantity" class="form-label">StockQuantity:</label> 
                <InputNumber id="stockquantity" @bind-Value="Book.StockQuantity" class="form-control" /> 
                <ValidationMessage For="() => Book.StockQuantity" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="supplierid" class="form-label">SupplierId:</label> 
                <InputNumber id="supplierid" @bind-Value="Book.SupplierId" class="form-control" /> 
                <ValidationMessage For="() => Book.SupplierId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Books.Add(Book);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}
