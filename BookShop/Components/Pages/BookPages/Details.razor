@page "/books/details"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Book</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@book.ImageUrl</dd>
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.Title</dd>
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@book.AuthorId</dd>
            <dt class="col-sm-2">PublisherId</dt>
            <dd class="col-sm-10">@book.PublisherId</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@book.Price</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@book.Description</dd>
            <dt class="col-sm-2">StockQuantity</dt>
            <dd class="col-sm-10">@book.StockQuantity</dd>
        </dl>
        <div>
            <a href="@($"/books/edit?bookid={book.BookId}")">Edit</a> |
            <a href="@($"/books")">Back to List</a>
        </div>
    }
</div>

@code {
    private Book? book;

    [SupplyParameterFromQuery]
    private int BookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Books.FirstOrDefaultAsync(m => m.BookId == BookId);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
