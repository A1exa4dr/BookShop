@page "/books/details"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Client, Admin")]

<PageTitle>Описание книги</PageTitle>
<link rel="stylesheet" href="css/bookdetail.css">

<h1>Описание книги</h1>

<AuthorizeView Roles="Admin">
    <div class="admin-view">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Параметр</th>
                    <th>Значение</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Изображение</td>
                    <td>
                        @if (!string.IsNullOrEmpty(book?.ImageUrl))
                        {
                            <img src="@book.ImageUrl" alt="Фото книги" style="max-width: 100px; max-height: 200px;" />
                        }
                        else
                        {
                            <span>Фото отсутствует</span>
                        }
                    </td>
                </tr>
                <tr>
                    <td>Название</td>
                    <td>@book?.Title</td>
                </tr>
                <tr>
                    <td>Автор</td>
                    <td>@book?.Author.AuthorName</td>
                </tr>
                <tr>
                    <td>Жанр</td>
                    <td>@book?.Genre.Name</td>
                </tr>
                <tr>
                    <td>Описание</td>
                    <td>@book?.Description</td>
                </tr>
                <tr>
                    <td>Цена</td>
                    <td>@book?.Price.ToString("C")</td>
                </tr>
                <tr>
                    <td>Издательство</td>
                    <td>@book?.Publisher.PublisherName</td>
                </tr>
                <tr>
                    <td>Количество на складе</td>
                    <td>@book?.StockQuantity</td>
                </tr>
                <tr>
                    <td>Поставщик</td>
                    <td>@book?.Supplier?.Name</td>
                </tr>
            </tbody>
        </table>
        <div>
            <a href="@($"/books/edit?bookid={book?.BookId}")" class="btn btn-warning">Редактировать</a>
            <button class="btn btn-secondary" @onclick="GoBackToCatalog">Обратно в каталог</button>
        </div>
    </div>
</AuthorizeView>

<AuthorizeView Roles="Client">
    <div class="client-view">
        <div class="book-details">
            <div class="book-image">
                @if (!string.IsNullOrEmpty(book?.ImageUrl))
                {
                    <img src="@book.ImageUrl" alt="Фото книги" style="max-width: 200px; max-height: 300px;" />
                }
                else
                {
                    <span>Фото отсутствует</span>
                }
            </div>
            <div class="book-info">
                <h2>@book?.Title</h2>
                <p><strong>Автор:</strong> @book?.Author.AuthorName</p>
                <p><strong>Жанр:</strong> @book?.Genre.Name</p>
                <p><strong>Описание:</strong> @book?.Description</p>
                <p><strong>Рейтинг:</strong> @book?.AverageRating</p>
                <div class="price-and-cart">
                    <p><strong>Цена:</strong> @book?.Price.ToString("C")</p>
                    <button class="btn btn-primary" @onclick="AddToCart">Добавить в корзину</button>
                </div>
            </div>
        </div>

        <div class="reviews-section">
            <h3>Отзывы</h3>
            @if (reviews is null || !reviews.Any())
            {
                <p>Отзывов пока нет.</p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var review in reviews)
                    {
                        <li class="list-group-item">
                            <strong>@review.User.UserName</strong> (Рейтинг: @review.Rating)
                            <p>@review.ReviewText</p>
                            <small>Дата публикации: @review.DatePosted.ToShortDateString()</small>
                        </li>
                    }
                </ul>
            }
        </div>

        <div class="add-review">
            <h4>Оставить отзыв</h4>
            <textarea @bind="reviewText" class="form-control" rows="4" placeholder="Введите ваш отзыв"></textarea>
            <br />
            <label>Оценка:</label>
            <select @bind="reviewRating" class="form-select">
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <br />
            <button class="btn btn-success" @onclick="SubmitReview">Оставить отзыв</button>
            @if (!string.IsNullOrEmpty(message))
            {
                <p class="message">@message</p>
            }
        </div>
    </div>
</AuthorizeView>

@code {
    private Book? book;
    private List<Review>? reviews;
    private string reviewText = string.Empty;
    private int reviewRating = 1; // По умолчанию минимальный рейтинг.
    private string message = string.Empty;

    [SupplyParameterFromQuery]
    private int BookId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        book = await context.Books
            .Include(b => b.Author)
            .Include(b => b.Genre)
            .Include(b => b.Publisher)
            .Include(b => b.Supplier)
            .FirstOrDefaultAsync(m => m.BookId == BookId);

        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        reviews = await context.Reviews
            .Include(r => r.User)
            .Where(r => r.BookId == BookId)
            .ToListAsync();
    }

    private async Task SubmitReview()
    {
        if (string.IsNullOrWhiteSpace(reviewText))
        {
            message = "Текст отзыва не может быть пустым.";
            return;
        }

        using var context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;
        if (userId is null)
        {
            message = "Вы должны быть авторизованы для отправки отзыва.";
            return;
        }

        var existingReview = await context.Reviews.FirstOrDefaultAsync(r => r.UserId == userId && r.BookId == BookId);
        if (existingReview != null)
        {
            message = "Вы уже оставили отзыв на эту книгу.";
            return;
        }

        var review = new Review
        {
            UserId = userId,
            BookId = BookId,
            Rating = reviewRating,
            ReviewText = reviewText,
            DatePosted = DateTime.Now
        };

        context.Reviews.Add(review);
        await context.SaveChangesAsync();

        await UpdateBookAverageRating(context);

        reviews = await context.Reviews
            .Include(r => r.User)
            .Where(r => r.BookId == BookId)
            .ToListAsync();

        message = "Спасибо за ваш отзыв!";
        reviewText = string.Empty;
        reviewRating = 1;

        StateHasChanged();
    }

    private async Task UpdateBookAverageRating(ApplicationDbContext context)
    {
        var bookReviews = await context.Reviews
            .Where(r => r.BookId == BookId)
            .ToListAsync();

        var averageRating = bookReviews.Any()
            ? bookReviews.Average(r => r.Rating)
            : 0;

        var currentBook = await context.Books.FindAsync(BookId);
        if (currentBook != null)
        {
            currentBook.AverageRating = (decimal)averageRating;
            await context.SaveChangesAsync();
        }
    }

    private void GoBackToCatalog()
    {
        NavigationManager.NavigateTo("/books");
    }

    private async Task AddToCart()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                return;
            }

            var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

            if (userId == null)
            {
                return;
            }

            var cart = await context.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null)
            {
                cart = new Cart { UserId = userId, CartItems = new List<CartItem>() };
                context.Carts.Add(cart);
            }

            var cartItem = cart.CartItems.FirstOrDefault(ci => ci.BookId == book.BookId);

            if (cartItem != null)
            {
                cartItem.Quantity++;
            }
            else
            {
                cart.CartItems.Add(new CartItem { CartId = cart.CartId, BookId = book.BookId, Quantity = 1 });
            }

            await context.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении в корзину: {ex.Message}");
        }
    }
}