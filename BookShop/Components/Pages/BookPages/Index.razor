@page "/books"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Client, Admin")]


<AuthorizeView Roles="Admin">
    <PageTitle>Управление книгами</PageTitle>
    <link href="css/admin.css" rel="stylesheet">

    <h1>Управление книгами</h1>

    <p>
        <a href="books/create" class="btn btn-primary">Добавить новую книгу</a>
    </p>

    <div class="filter-container">
        <input type="search" @bind="titleFilter" @bind:event="oninput" placeholder="Поиск по названию или автору..." class="form-control filter-input" />
        <select @bind="selectedGenre" class="form-select filter-input">
            <option value="">Все жанры</option>
            @foreach (var genre in genres)
            {
                <option value="@genre.GenreId">@genre.Name</option>
            }
        </select>
        <button @onclick="ResetFilter" class="btn btn-dark filter-button">Сбросить фильтр</button>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th>Фото</th>
                <th>Название</th>
                <th>Автор</th>
                <th>Жанр</th>
                <th>Рейтинг</th>
                <th>Цена</th>
                <th>Количество</th>
                <th>Издательство</th>
                <th>Описание</th>
                <th>Поставщик</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in FilteredBooks)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(book.ImageUrl))
                        {
                            <img src="@book.ImageUrl" alt="Book Image" style="max-width: 150px; max-height: 150px;" />
                        }
                        else
                        {
                            <span>No Image</span>
                        }
                    </td>
                    <td>@book.Title</td>
                    <td>@book.Author.AuthorName</td>
                    <td>@book.Genre.Name</td>
                    <td>@(book.AverageRating == 0 ? "Нет рейтинга" : (book.AverageRating?.ToString("F1") ?? "N/A"))
                        <span class="star">★</span>
                    </td>
                    <td>@book.Price.ToString("C")</td>
                    <td>@book.StockQuantity</td>
                    <td>@book.Publisher.PublisherName</td>
                    <td>@(book.Description.Length > 50 ? book.Description.Substring(0, 50) + "..." : book.Description)</td>
                    <td>@(book.Supplier?.Name ?? "Нет поставщика")</td>
                    <td>
                        <a href="@($"books/details?bookid={book.BookId}")" class="btn btn-info">Описание</a>
                        <a href="@($"books/edit?bookid={book.BookId}")" class="btn btn-warning">Редактировать</a>
                        <a href="@($"books/delete?bookid={book.BookId}")" class="btn btn-danger">Удалить</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</AuthorizeView>

<AuthorizeView Roles="Client">
    <PageTitle>Каталог</PageTitle>
    <link href="css/userscatalog.css" rel="stylesheet">

    <div class="user-actions">
        <button @onclick="GoToOrders" class="btn btn-primary">Мои заказы</button>
        <button @onclick="GoToCart" class="btn btn-primary">Моя корзина</button>
    </div>

    <div class="filter-container">
        <input type="search" @bind="titleFilter" @bind:event="oninput" placeholder="Поиск по названию..." class="form-control filter-input" />
        <select @bind="selectedGenre" class="form-select filter-input">
            <option value="">Все жанры</option>
            @foreach (var genre in genres)
            {
                <option value="@genre.GenreId">@genre.Name</option>
            }
        </select>
        <input type="number" @bind="maxPrice" placeholder="Максимальная цена" class="form-control filter-input" />
        <button @onclick="ResetFilter" class="btn btn-dark filter-button">Сбросить фильтр</button>

    </div>

    <div class="book-grid">
        @if (FilteredBooks.Any())
        {
            @foreach (var book in FilteredBooks)
            {
                <div class="book-card">
                    <div class="book-image">
                        @if (!string.IsNullOrEmpty(book.ImageUrl))
                        {
                            <img src="@book.ImageUrl" alt="@book.Title" />
                        }
                        else
                        {
                            <span>No Image</span>
                        }
                    </div>
                    <div class="book-details">
                        <h3>@book.Title</h3>
                        <p><strong>Автор:</strong> @book.Author.AuthorName</p>
                        @* <p><strong>Жанр:</strong> @book.Genre.Name</p> *@
                        <p><strong>Рейтинг:</strong> @(book.AverageRating == 0 ? "Нет рейтинга" : (book.AverageRating?.ToString("F1") ?? "N/A"))
                            <span class="star">★</span>
                        </p>
                        <p><strong>Цена:</strong> @book.Price.ToString("C0")</p>
                    </div>
                    <div class="book-actions">
                        <a href="@($"books/details?bookid={book.BookId}")" class="btn btn-info action-button">Подробнее</a>
                        @if (book.StockQuantity > 0)
                        {
                            <button @onclick="() => AddToCart(book)" class="btn btn-danger action-button">Добавить в корзину</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary action-button" disabled>Нет в наличии</button>
                        }
                        <button @onclick="() => AddToWishlist(book)" class="btn btn-success action-button">В избранное</button>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Книги не найдены.</p>
        }
    </div>
</AuthorizeView>

@code {
    private string titleFilter = string.Empty;
    private string selectedGenre = string.Empty;
    private decimal? maxPrice = null; // Максимальная цена
    private ApplicationDbContext context = default!;
    private List<Genre> genres = new List<Genre>();

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        genres = context.Genres.ToList(); // Загружаем список жанров
    }

    private void ResetFilter()
    {
        titleFilter = string.Empty;
        selectedGenre = string.Empty;
        maxPrice = null;
    }

    private IQueryable<Book> FilteredBooks =>
    context.Books
        .Include(b => b.Author)
        .Include(b => b.Publisher)
        .Include(b => b.Genre)
        .Include(b => b.Supplier)
        .Where(b => (string.IsNullOrEmpty(titleFilter) ||
                     b.Title.Contains(titleFilter) ||
                     b.Author.AuthorName.Contains(titleFilter)) && // Добавляем поиск по автору
                    (string.IsNullOrEmpty(selectedGenre) || b.Genre.GenreId.ToString() == selectedGenre) &&
                    (!maxPrice.HasValue || b.Price <= maxPrice)); // Фильтрация по цене

    private void GoToOrders()
    {
        NavigationManager.NavigateTo("/myorders");
        // var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        // var user = authState.User;

        // if (user.Identity?.IsAuthenticated == true)
        // {
        //     using var db = DbFactory.CreateDbContext();
        //     var userId = db.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

        //     if (!string.IsNullOrEmpty(userId))
        //     {
        //         NavigationManager.NavigateTo($"/myorders/{userId}");
        //     }
        // }
    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/usercart");
    }

    private async Task AddToCart(Book book)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                return;
            }

            var userId = db.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

            if (userId == null)
            {
                return;
            }

            var cart = await db.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null)
            {
                cart = new Cart { UserId = userId, CartItems = new List<CartItem>() };
                db.Carts.Add(cart);
            }

            var cartItem = cart.CartItems.FirstOrDefault(ci => ci.BookId == book.BookId);

            if (cartItem != null)
            {
                cartItem.Quantity++;
            }
            else
            {
                cart.CartItems.Add(new CartItem { CartId = cart.CartId, BookId = book.BookId, Quantity = 1 });
            }

            await db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении в корзину: {ex.Message}");
        }
    }

    private async Task AddToWishlist(Book book)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                Console.WriteLine("Ошибка: пользователь не авторизован.");
                return;
            }

            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("Ошибка: не удалось определить UserId.");
                return;
            }

            using var db = DbFactory.CreateDbContext();

            var existingWishlist = await db.Wishlists
                .FirstOrDefaultAsync(w => w.UserId == userId && w.BookId == book.BookId);

            if (existingWishlist != null)
            {
                Console.WriteLine($"Книга '{book.Title}' уже находится в избранном.");
                return;
            }

            var wishlistItem = new Wishlist { UserId = userId, BookId = book.BookId };
            db.Wishlists.Add(wishlistItem);
            await db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении в избранное: {ex.Message}");
        }
    }
}