@page "/books"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BookShop.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Client, Admin")]

<PageTitle>Каталог</PageTitle>
<link href="css/catalog.css" rel="stylesheet">

<h1>Каталог</h1>

<AuthorizeView Roles="Client">
    <div style="text-align: right;">
        <button @onclick="GoToOrders" class="btn btn-primary">Мои заказы</button>
        <button @onclick="GoToCart" class="btn btn-primary"> Моя корзина</button><br />
        @* <button @onclick="GoToWishlist" class="btn btn-primary">Избранное</button> *@
    </div>
</AuthorizeView>

<AuthorizeView Roles="Admin">
<p>
    <a href="books/create">Добавить книгу</a>
</p>
</AuthorizeView>
<br />
<div class="filter-container">
    <input type="search" @bind="titleFilter" @bind:event="oninput" placeholder="Поиск по названию..." class="form-control filter-input" />
    <select @bind="selectedGenre" class="form-select filter-input">
        <option value="">Все жанры</option>
        @foreach (var genre in genres)
        {
            <option value="@genre.GenreId">@genre.Name</option>
        }
    </select>
    <button @onclick="ResetFilter" class="btn btn-dark filter-button">Сбросить фильтр</button>
</div>

<QuickGrid Class="table" Items="FilteredBooks" Pagination="pagination">
    <TemplateColumn Title="Фото">
        @if ((context as Book)?.ImageUrl is string imageUrl && !string.IsNullOrWhiteSpace(imageUrl))
        {
            @((MarkupString)$"<img src='{imageUrl}' alt='Book Image' style='max-width: 150px; max-height: 150px;' />")
        }
        else
        {
            <span>No Image</span>
        }
    </TemplateColumn>

    <PropertyColumn Property="book => book.Title" Title="Названиеffffffffffffffffffffffffff" Sortable="true" />
    <PropertyColumn Property="book => book.Author.AuthorName" Title="Автор" />
    <PropertyColumn Property="book => book.Genre.Name" Title="Жанр" />
    <PropertyColumn Property="book => book.AverageRating" Title="Рейтинг" Sortable="true"/>
    <PropertyColumn Property="book => book.Price" Title="Цена" Sortable="true" />

    <AuthorizeView Roles="Admin">
        <PropertyColumn Property="book => book.Publisher.PublisherName" Title="Издательство" />
        <PropertyColumn Property="book => book.Description" Title="Описание" />
        <PropertyColumn Property="book => book.StockQuantity" Title="Количество" />
        <PropertyColumn Property="book => book.Supplier.Name" Title="Поставщик" />
    </AuthorizeView>

    <TemplateColumn Context="book">
        <a href="@($"books/details?bookid={book.BookId}")" class="btn btn-info action-button">Описание</a> <br />
        <AuthorizeView Roles="Client">
            <button @onclick="() => AddToCart(book)" class="btn btn-danger action-button"> Добавить в корзину </button> <br />
            <button @onclick="() => AddToWishlist(book)" class="btn btn-success action-button"> В избранное </button><br />
        </AuthorizeView>

        <AuthorizeView Roles="Admin">
            <a href="@($"books/edit?bookid={book.BookId}")" class="btn btn-warning action-button">Редактировать</a><br />
            <a href="@($"books/delete?bookid={book.BookId}")" class="btn btn-danger action-button">Удалить</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

<Paginator State="pagination" />


@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 6 };
    private string titleFilter = string.Empty;
    private string selectedGenre = string.Empty;
    private ApplicationDbContext context = default!;
    private List<Genre> genres = new List<Genre>();

    private async Task GoToOrders()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using var context = DbFactory.CreateDbContext();

            // Получаем UserId как строку
            var userId = context.Users
                .Where(u => u.UserName == user.Identity.Name)
                .Select(u => u.Id) // Предполагается, что Id имеет тип string
                .FirstOrDefault();

            if (!string.IsNullOrEmpty(userId))
            {
                // Переход на страницу заказов
                NavigationManager.NavigateTo($"/myorders/{userId}");
            }
        }
    }

    private void GoToCart()
    {
        // Перенаправление на страницу корзины
        NavigationManager.NavigateTo("/usercart");
    }

    private void GoToWishlist()
    {
        // Перенаправление на страницу корзины
        NavigationManager.NavigateTo("/wishlists");
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        genres = context.Genres.ToList(); // Загружаем список жанров
    }

    private void ResetFilter()
    {
        titleFilter = string.Empty;
        selectedGenre = string.Empty;
    }

    private void ApplyGenreFilter(ChangeEventArgs e)
    {
        selectedGenre = e.Value?.ToString() ?? string.Empty;
    }

    private IQueryable<Book> FilteredBooks =>
        context.Books
            .Include(b => b.Author)
            .Include(b => b.Publisher)
            .Include(b => b.Genre)
            .Include(b => b.Supplier)
            .Where(b => (string.IsNullOrEmpty(titleFilter) || b.Title.Contains(titleFilter)) &&
                        (string.IsNullOrEmpty(selectedGenre) || b.Genre.GenreId.ToString() == selectedGenre));

    private async Task AddToCart(Book book)
    {
        // Создаем новый экземпляр контекста
        using var context = DbFactory.CreateDbContext();

        // Получение информации о текущем пользователе
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            // Если пользователь не авторизован, обработайте это
            return;
        }

        // Получение ID текущего пользователя
        var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

        if (userId == null)
        {
            // Если пользователь не найден, обработайте это
            return;
        }

        // Получение или создание корзины для пользователя
        var cart = await context.Carts
            .Include(c => c.CartItems)
            .FirstOrDefaultAsync(c => c.UserId == userId);

        if (cart == null)
        {
            cart = new Cart
                {
                    UserId = userId,
                    CartItems = new List<CartItem>()
                };
            context.Carts.Add(cart);
        }

        // Проверка, есть ли уже эта книга в корзине
        var cartItem = cart.CartItems.FirstOrDefault(ci => ci.BookId == book.BookId);

        if (cartItem != null)
        {
            // Если книга уже в корзине, увеличиваем количество
            cartItem.Quantity++;
        }
        else
        {
            // Если книги еще нет в корзине, добавляем её
            cart.CartItems.Add(new CartItem
                {
                    CartId = cart.CartId,
                    BookId = book.BookId,
                    Quantity = 1
                });
        }

        // Сохранение изменений в базе данных
        await context.SaveChangesAsync();
    }
    private async Task AddToWishlist(Book book)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                Console.WriteLine("Ошибка: пользователь не авторизован.");
                return;
            }

            // Попытка извлечь UserId
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(userId))
            {
                Console.WriteLine("Ошибка: не удалось определить UserId.");
                return;
            }

            using var context = DbFactory.CreateDbContext();

            // Проверка, не добавлена ли книга ранее
            var existingWishlist = await context.Wishlists
                .FirstOrDefaultAsync(w => w.UserId == userId && w.BookId == book.BookId);

            if (existingWishlist != null)
            {
                Console.WriteLine($"Книга '{book.Title}' уже находится в избранном.");
                return;
            }

            // Добавление книги в избранное
            var wishlistItem = new Wishlist
                {
                    UserId = userId,
                    BookId = book.BookId
                };

            context.Wishlists.Add(wishlistItem);
            await context.SaveChangesAsync();

            Console.WriteLine($"Книга '{book.Title}' успешно добавлена в избранное.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при добавлении книги в избранное: {ex.Message}");
        }
    }

    // public async ValueTask DisposeAsync() => await context.DisposeAsync();
    public async ValueTask DisposeAsync()
    {
        
    }
}
