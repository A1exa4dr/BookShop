@page "/publishers/create"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Добавить издательство</PageTitle>

<h1>Добавить издательство</h1>

<h2>Издательство</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Publisher" OnValidSubmit="AddPublisher" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="publishername" class="form-label">Название издательство:</label> 
                <InputText id="publishername" @bind-Value="Publisher.PublisherName" class="form-control" /> 
                <ValidationMessage For="() => Publisher.PublisherName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="contactemail" class="form-label">Почта для связи:</label> 
                <InputText id="contactemail" @bind-Value="Publisher.ContactEmail" class="form-control" /> 
                <ValidationMessage For="() => Publisher.ContactEmail" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/publishers" class="btn btn-secondary">Обратно к списку издательств</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Publisher Publisher { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPublisher()
    {
        using var context = DbFactory.CreateDbContext();
        context.Publishers.Add(Publisher);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/publishers");
    }
}
