@page "/orderdetails/details"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IDbContextFactory<BookShop.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Описание</PageTitle>

<h1>Описание</h1>

<div>
    <h2>Детали заказа</h2>
    <hr />
    @if (orderdetail is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Книга</dt>
            <dd class="col-sm-10">@orderdetail.Book.Title</dd>
            <dt class="col-sm-2">Количество</dt>
            <dd class="col-sm-10">@orderdetail.Quantity</dd>
            <dt class="col-sm-2">Цена</dt>
            <dd class="col-sm-10">@orderdetail.Price</dd>
        </dl>
        <div>
            <a href="@($"/orderdetails/edit?orderid={orderdetail.OrderId}")">Редактировать</a> |
            <a href="/orderdetails?orderid=@orderdetail?.OrderId">Возврат к списку заказов</a>
           @*  <a href="@($"/orderdetails")">Back to List</a> *@
        </div>
    }
</div>

@code {
    private OrderDetail? orderdetail;

    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        orderdetail = await context.OrderDetails.Include(od => od.Book).FirstOrDefaultAsync(m => m.OrderId == OrderId);

        if (orderdetail is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
