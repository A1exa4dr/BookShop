@page "/myorders"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Roles = "Client")]

<PageTitle>Мои заказы</PageTitle>
<link href="css/myorders.css" rel="stylesheet">

<h1>Мои заказы</h1>

<button class="btn btn-primary" @onclick="GoToCatalog">Вернуться в каталог</button>

@if (userOrders == null)
{
    <p>Загрузка заказов...</p>
}
else if (!userOrders.Any())
{
    <p>У вас нет заказов.</p>
}
else
{
    foreach (var order in userOrders)
    {
        <div class="order">
            <div class="order-header" @onclick="() => ToggleOrderDetails(order.OrderId)">
                <h3>Заказ № @order.OrderId</h3>
                <p>Дата заказа: @order.OrderDate.ToString("dd.MM.yyyy")</p>
                <p>Статус: @order.OrderStatus.Status</p>
                <p>Оплата: @order.PaymentType.Name</p>
                <p>Общая сумма: @order.TotalAmount.ToString("C")</p>

                @if (CanCancelOrder(order))
                {
                    <button class="btn btn-danger" @onclick="() => CancelOrder(order.OrderId)">Отменить заказ</button>
                }
            </div>

            @if (expandedOrderIds.Contains(order.OrderId))
            {
                <div class="order-details">
                    <h4>Детали заказа</h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Название книги</th>
                                <th>Количество</th>
                                <th>Цена за единицу</th>
                                <th>Итоговая цена</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detail in order.OrderDetails)
                            {
                                <tr>
                                    <td>@detail.Book.Title</td>
                                    <td>@detail.Quantity</td>
                                    <td>@detail.Price.ToString("C")</td>
                                    <td>@((detail.Quantity * detail.Price).ToString("C"))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    }
}

@code {
    private List<Order> userOrders = new();
    private HashSet<int> expandedOrderIds = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userId = user.FindFirst(c => c.Type == "sub" || c.Type.Contains("nameidentifier"))?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        using var context = DbFactory.CreateDbContext();

        userOrders = await context.Orders
            .Include(o => o.OrderStatus)
            .Include(o => o.PaymentType)
            .Include(o => o.OrderDetails)
                .ThenInclude(od => od.Book)
            .Where(o => o.UserId == userId)
            .OrderByDescending(o => o.OrderDate)
            .ToListAsync();
    }

    private void ToggleOrderDetails(int orderId)
    {
        if (expandedOrderIds.Contains(orderId))
        {
            expandedOrderIds.Remove(orderId);
        }
        else
        {
            expandedOrderIds.Add(orderId);
        }
    }

    private void GoToCatalog()
    {
        NavigationManager.NavigateTo("/books");
    }

    private bool CanCancelOrder(Order order)
    {
        return order.OrderStatus.Status != "Доставлен"
            && order.OrderStatus.Status != "В пути"
            && order.OrderStatus.Status != "Отменен";
    }

    private async Task CancelOrder(int orderId)
    {
        using var context = DbFactory.CreateDbContext();

        var order = await context.Orders
            .Include(o => o.OrderStatus)
            .FirstOrDefaultAsync(o => o.OrderId == orderId);

        if (order != null && CanCancelOrder(order))
        {
            var canceledStatus = await context.OrderStatuses
                .FirstOrDefaultAsync(os => os.Status == "Отменен");

            if (canceledStatus != null)
            {
                order.OrderStatusId = canceledStatus.OrderStatusId;
                await context.SaveChangesAsync();
            }

            // Обновляем список заказов
            await OnInitializedAsync();
        }
    }
}
