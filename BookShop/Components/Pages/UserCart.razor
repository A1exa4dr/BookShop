@page "/usercart"
@using Microsoft.EntityFrameworkCore
@using BookShop.Data
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@attribute [Authorize(Roles = "Client")]

<link rel="stylesheet" href="css/usercart.css">

<h1>Корзина</h1>

<!-- Уведомление о недостаточном количестве -->
@if (!string.IsNullOrEmpty(stockErrorMessage))
{
    <div class="alert alert-danger">
        @stockErrorMessage
    </div>
}

@if (cartItems.Count == 0)
{
    <p>Корзина пуста.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Фото</th>
                <th>Название</th>
                <th>Описание</th>
                <th>Количество</th>
                <th>Цена за единицу</th>
                <th>Общая цена</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(item.Book.ImageUrl))
                        {
                            <img src="@item.Book.ImageUrl" alt="Фото книги" style="max-width: 130px; max-height: 180px;" />
                        }
                        else
                        {
                            <span>Фото отсутствует</span>
                        }
                    </td>
                    <td>@item.Book.Title</td>
                    <td>@item.Book.Description</td>
                    <td>
                        <input type="number" min="1" value="@item.Quantity"
                               @onchange="(e) => UpdateQuantity(item, int.Parse(e.Value.ToString()))" />
                    </td>
                    <td>@item.Book.Price руб.</td>
                    <td>@(item.Book.Price * item.Quantity) руб.</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => RemoveFromCart(item)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h3 style="text-align: right;">Итого: @TotalCartPrice руб.</h3>
    <div style="text-align: right;">
        <button class="btn btn-success" @onclick="ShowOrderForm">Купить</button>
    </div>
}

<!-- Модальное окно -->
@if (showOrderForm)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h2>Оформление заказа</h2>
            <form @onsubmit="SubmitOrder">
                <div class="form-group">
                    <label>Сумма заказа:</label>
                    <input type="text" class="form-control" readonly value="@TotalCartPrice руб." />
                </div>
                <div class="form-group">
                    <label>Тип оплаты:</label>
                    <select class="form-control" @bind="selectedPaymentTypeId">
                        @foreach (var paymentType in paymentTypes)
                        {
                            <option value="@paymentType.PaymentTypeId">@paymentType.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Адрес доставки:</label>
                    <input type="text" class="form-control" @bind="deliveryAddress" placeholder="Введите адрес доставки" />
                </div>
                <button type="submit" class="btn btn-primary">Оплатить</button>
                <button type="button" class="btn btn-secondary" @onclick="CancelOrder">Отмена</button>
            </form>
        </div>
    </div>
}


@code {
    private List<CartItem> cartItems = new List<CartItem>();
    private bool showOrderForm = false;
    private int selectedPaymentTypeId = 1; // По умолчанию первый тип оплаты
    private string deliveryAddress = string.Empty;
    private string stockErrorMessage = string.Empty;

    private List<PaymentType> paymentTypes = new List<PaymentType>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
        await LoadPaymentTypes();
        await LoadUserDeliveryAddress();
    }

    private async Task LoadCartItems()
    {
        using var context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            cartItems = new List<CartItem>();
            return;
        }

        var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

        if (userId != null)
        {
            cartItems = await context.CartItems
                .Include(ci => ci.Book)
                .Where(ci => ci.Cart.UserId == userId)
                .ToListAsync();
        }
    }

    private async Task LoadPaymentTypes()
    {
        using var context = DbFactory.CreateDbContext();
        paymentTypes = await context.PaymentTypes.ToListAsync();
    }

    private async Task LoadUserDeliveryAddress()
    {
        using var context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

        if (userId != null)
        {
            var userAddress = await context.Users
                .Where(u => u.Id == userId)
                .Select(u => u.Address)
                .FirstOrDefaultAsync();

            if (!string.IsNullOrEmpty(userAddress))
            {
                deliveryAddress = userAddress;
            }
        }
    }

    private void ShowOrderForm()
    {
        showOrderForm = true;
    }

    private void CancelOrder()
    {
        showOrderForm = false;
        deliveryAddress = string.Empty;
    }

    private async Task RemoveFromCart(CartItem item)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены, что хотите удалить книгу \"{item.Book.Title}\" из корзины?");
        if (!confirmed)
            return;

        using var context = DbFactory.CreateDbContext();

        var cartItem = await context.CartItems
            .FirstOrDefaultAsync(ci => ci.CartId == item.CartId && ci.BookId == item.BookId);

        if (cartItem != null)
        {
            context.CartItems.Remove(cartItem);
            await context.SaveChangesAsync();
        }

        await LoadCartItems();
    }


    private async Task UpdateQuantity(CartItem item, int newQuantity)
    {
        using var context = DbFactory.CreateDbContext();

        var cartItem = await context.CartItems
            .FirstOrDefaultAsync(ci => ci.CartId == item.CartId && ci.BookId == item.BookId);

        if (cartItem != null && newQuantity > 0)
        {
            cartItem.Quantity = newQuantity;
            await context.SaveChangesAsync();
        }
        else if (cartItem != null && newQuantity == 0)
        {
            context.CartItems.Remove(cartItem);
            await context.SaveChangesAsync();
        }

        await LoadCartItems();
    }

    private async Task SubmitOrder()
    {
        if (string.IsNullOrWhiteSpace(deliveryAddress))
        {
            stockErrorMessage = "Пожалуйста, укажите адрес доставки.";
            return;
        }

        stockErrorMessage = string.Empty;

        using var context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = context.Users.FirstOrDefault(u => u.UserName == user.Identity.Name)?.Id;

        if (userId != null && cartItems.Any())
        {
            // Проверка наличия книг на складе
            foreach (var item in cartItems)
            {
                var book = await context.Books.FirstOrDefaultAsync(b => b.BookId == item.BookId);
                if (book == null || book.StockQuantity < item.Quantity)
                {
                    stockErrorMessage = $"Книги '{@item.Book.Title}' нет в достаточном количестве на складе.";
                    return;
                }
            }

            // Создаем заказ
            var order = new Order
                {
                    UserId = userId,
                    OrderDate = DateTime.Now,
                    TotalAmount = TotalCartPrice,
                    PaymentTypeId = selectedPaymentTypeId,
                    DeliveryAddress = deliveryAddress,
                    OrderStatusId = 1 // Например, "Ожидает подтверждения"
                };

            context.Orders.Add(order);
            await context.SaveChangesAsync();

            // Создаем детали заказа для каждой книги в корзине
            foreach (var item in cartItems)
            {
                var orderDetail = new OrderDetail
                    {
                        OrderId = order.OrderId,
                        BookId = item.BookId,
                        Quantity = item.Quantity,
                        Price = item.Book.Price
                    };

                context.OrderDetails.Add(orderDetail);

                var book = await context.Books.FirstOrDefaultAsync(b => b.BookId == item.BookId);
                if (book != null)
                {
                    book.StockQuantity -= item.Quantity; // Уменьшаем количество на складе
                }
            }

            await context.SaveChangesAsync();

            // Удаляем все элементы из корзины пользователя
            var userCartItems = await context.CartItems
                .Where(ci => ci.Cart.UserId == userId)
                .ToListAsync();

            context.CartItems.RemoveRange(userCartItems);
            await context.SaveChangesAsync();

            // Очищаем локальный список корзины
            cartItems.Clear();

            // Скрываем форму заказа
            showOrderForm = false;
            deliveryAddress = string.Empty;
        }
    }

    private decimal TotalCartPrice => cartItems.Sum(item => item.Quantity * item.Book.Price);
}